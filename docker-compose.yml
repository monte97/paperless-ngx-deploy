version: '3.8'

services:
  #---------------------------------------------------------------------
  # 1. Paperless-ngx Webserver
  #    This is the main application.
  #---------------------------------------------------------------------
  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-webserver
    ports:
      # The host port is now configurable via the .env file
      - "${PAPERLESS_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./data:/usr/src/paperless/data
      - ./media:/usr/src/paperless/media
      - ./export:/usr/src/paperless/export
      - ./consume:/usr/src/paperless/consume
    env_file: .env
    environment:
      # Ensure the UID/GID matches your host user to avoid permission issues.
      # You can find them with the `id -u` and `id -g` commands.
      USERMAP_UID: 1000
      USERMAP_GID: 1000
      # This URL should point to the externally accessible address.
      # It will now use the PAPERLESS_PORT variable.
      PAPERLESS_URL: http://localhost:${PAPERLESS_PORT:-8000}
      # Connection to Redis
      PAPERLESS_REDIS: redis://redis:6379
      # Connection to the database
      PAPERLESS_DBHOST: db
      # Number of task workers
      PAPERLESS_TASK_WORKERS: ${PAPERLESS_TASK_WORKERS:-2}
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - paperless-net

  #---------------------------------------------------------------------
  # 2. Database (PostgreSQL)
  #    Stores all metadata and configuration for Paperless.
  #---------------------------------------------------------------------
  db:
    image: postgres:17-alpine
    container_name: paperless-db
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file: .env
    restart: unless-stopped
    networks:
      - paperless-net

  #---------------------------------------------------------------------
  # 3. Redis
  #    Used as a message broker for background tasks.
  #---------------------------------------------------------------------
  redis:
    image: redis:8-alpine
    container_name: paperless-redis
    restart: unless-stopped
    networks:
      - paperless-net

  #---------------------------------------------------------------------
  # 4. Database Backup Service
  #    Performs a daily backup of the PostgreSQL database.
  #---------------------------------------------------------------------
  db-backup:
    image: prodrigestivill/postgres-backup-local
    container_name: paperless-db-backup
    volumes:
      - ./backups:/backups
    env_file: .env
    environment:
      POSTGRES_HOST: db
      # Runs the backup every day at 03:00 AM. Uses cron format.
      SCHEDULE: "@daily"
      # Keeps backups for the last 7 days.
      BACKUP_KEEP_DAYS: 7
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - paperless-net
    
  #---------------------------------------------------------------------
  # 5. Media Backup Service
  #    Performs a daily backup of the 'media' folder.
  #---------------------------------------------------------------------
  media-backup:
    image: alpine:latest
    container_name: paperless-media-backup
    volumes:
      # Mount the media folder as read-only for safety
      - ./media:/media:ro
      # Mount the backups folder to save the archive
      - ./backups:/backups
    # Script to create a daily tar.gz archive
    command: >
      sh -c "echo '0 4 * * * tar -czf /backups/media-backup-$(date +\%Y\%m\%d).tar.gz -C / media' > /etc/crontabs/root && crond -f -d 8"
    restart: unless-stopped
    networks:
      - paperless-net

volumes:
  pgdata:

networks:
  paperless-net:
    driver: bridge
